<?php
// --------------------------------------------------------------------------
namespace App\Models;
// --------------------------------------------------------------------------
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
// --------------------------------------------------------------------------
use App\Models\User as User;
use App\Models\CompanyBank as Bank;
use App\Models\CompanyOffice as Office;
use App\Models\CompanyBorrower as Borrower;
use App\Models\CompanyBankAccount as Account;
// --------------------------------------------------------------------------
use App\Models\PjPurchaseSale as Sale;
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
class Company extends Model {
    // ----------------------------------------------------------------------
    use SoftDeletes;
    // ----------------------------------------------------------------------
    protected $appends = [ 'type', 'groups' ];
    // ----------------------------------------------------------------------
    protected $guarded = [
        'admin_id',
        'license_authorizer_id',
        'license_update',
        'license_number',
        'license_date',
        'real_estate_guarantee_association',
        'created_at',
        'updated_at',
        'deleted_at'
    ];
    // ----------------------------------------------------------------------
    public function users(){
        return $this->hasMany( User::class );
    }
    // ----------------------------------------------------------------------
    public function banks(){
        return $this->hasMany( Bank::class );
    }
    // ----------------------------------------------------------------------
    public function offices(){
        return $this->hasMany( Office::class );
    }
    // ----------------------------------------------------------------------
    public function accounts(){
        return $this->hasMany( Account::class );
    }
    // ----------------------------------------------------------------------
    public function borrowers(){
        return $this->hasMany( Borrower::class  );
    }
    // ----------------------------------------------------------------------
    public function sale(){
        return $this->hasOne( Sale::class, 'company_id_organizer' );
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Custom type data accessor
    // ----------------------------------------------------------------------
    public function getTypeAttribute(){
        return 'company';
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Custom groups data accessor
    // ----------------------------------------------------------------------
    public function getGroupsAttribute(){
        // ------------------------------------------------------------------
        $groups = array();
        $types = config('const.COMPANY_TYPES');
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Get company types
        // ------------------------------------------------------------------
        if( !empty( $types )) foreach( $types as $name => $type ){
            if( !empty( $this->{ $type })) $groups[] = __( 'label.$company.type.'. $name );
        }
        // ------------------------------------------------------------------
        return join( ', ', $groups );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    public function get_company( $id ){
        // ------------------------------------------------------------------
        $id = (int) $id;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $query = Company::where( 'id', $id )->with('admin');
        // ------------------------------------------------------------------
        $query = $query->with([ 'banks' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'offices' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'accounts' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'borrowers' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $entry = $query->first();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate agent license
        // ------------------------------------------------------------------
        if( !empty( $entry->license_date )){
            $date = Carbon::parse( $entry->license_date );
            $entry->license_date = $date->format('Y/m/d');
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        return $entry;
        // ------------------------------------------------------------------
    }


}
