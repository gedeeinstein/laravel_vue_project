<?php
// --------------------------------------------------------------------------
namespace App\Http\Controllers\Backend\Project;
// --------------------------------------------------------------------------
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
// --------------------------------------------------------------------------
use App\Models\Project;
use App\Models\RequestInspection as Inspection;
use App\Models\SalePurchase as Purchase;
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
class ProjectInspectionController extends Controller {
    // ----------------------------------------------------------------------
    public function index(){
        $data = new \stdClass;
        $data->user = Auth::user();
        $data->filters = new \stdClass;
        $data->template = new \stdClass;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $data->page_title = 'リクエスト審査';
        $data->tabs = collect([
            array( 'id' => 'all', 'label' => '全て' ),
            array( 'id' => 1, 'label' => '未承認' ),
            array( 'id' => 2, 'label' => '承認' ),
            array( 'id' => 3, 'label' => '非承認' )
        ]);
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Pagination settings
        // ------------------------------------------------------------------
        $data->pagination = array(
            'first' => array( 'label' => '最初' ),
            'prev' => array( 'label' => '前' ),
            'next' => array( 'label' => '次' ),
            'last' => array( 'label' => '最後' ),
            'length' => 5
        );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $data->entries   = Inspection::all();
        $data->purchases = Purchase::with( 'contract.section' )->get();        
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // dd( $data );
        return view( 'backend.project.inspection.index', (array) $data );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Handle filter request
    // ----------------------------------------------------------------------
    public function filter( Request $request ){
        $response = (object) array( 'status' => 'success' );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Base query
        // ------------------------------------------------------------------
        $relations = collect([ 'project', 'sheet' ]);
        $query = Inspection::with( $relations->all());
        $query = $query->orderBy( 'request_datetime', 'desc' );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Process filters
        // ------------------------------------------------------------------
        if( !empty( $request->filter )){
            $filter = (object) $request->filter;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Default configuration
            // --------------------------------------------------------------
            $page = $filter->page ?? 1;
            $perpage = 10; $columns = ['*'];
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Request type
            // --------------------------------------------------------------
            if( !empty( $filter->type )){
                $type = $filter->type;
                if( 'all' !== $type ){
                    $query = $query->where( 'kind', (int) $type );
                }
            }
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Paginate the result
            // --------------------------------------------------------------
            $response->result = $query->paginate( $perpage, $columns, 'page', $page );
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // dd( $response );
        return response()->json( $response );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Update request
    // ----------------------------------------------------------------------
    public function update( $entryID, Request $request ){
        // ------------------------------------------------------------------
        $alert = new \stdClass; $response = new \stdClass;
        $data = new \stdClass; $response->data = $data;
        $response->alert = $alert; $response->status = 'error';
        // ------------------------------------------------------------------
        $alert->icon = 'error'; $alert->heading = __('label.error');
        $alert->text = __('label.failed_update_message');
        // ------------------------------------------------------------------
        $updates = (object) $request->updates;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        try {
            // --------------------------------------------------------------
            // Find the inspection entry
            // --------------------------------------------------------------
            $model = Inspection::find( $entryID );
            if( !$model ) return response()->json( (array) $response );
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Collect update-able fields
            // --------------------------------------------------------------
            $fields = collect([ 'examination' ]);
            if( 3 === $model->kind ) $fields->push( 'examination_text' );
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Assign the updates
            // --------------------------------------------------------------
            $fields = $fields->unique()->values(); // Remove duplicates
            $fields->each( function( $field ) use( $model, $updates ){
                if( property_exists( $updates, $field )) $model->{$field} = $updates->{$field};
            });
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $model->save(); // Save the updates
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $response->status = 'success'; // Update the alert
            $alert->icon = 'success'; $alert->heading = __('label.success');
            $alert->text = __('label.success_update_message');
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $response->updates = $request->updates;
            return response()->json( (array) $response );
            // --------------------------------------------------------------
        } catch( \Exception $error ){
            // --------------------------------------------------------------
            // error response
            // --------------------------------------------------------------
            Log::error([
                'message' => $error->getMessage(),
                'file'    => $error->getFile().'         : '.$error->getLine(),
                'route'   => $_SERVER['REQUEST_METHOD'].': '.$_SERVER['REQUEST_URI'],
            ]);
            // --------------------------------------------------------------
            $alert->error = $error->getMessage();
            return response()->json( $response , 500 );
            // --------------------------------------------------------------
        }
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Handle project approval/inspection request
    // ----------------------------------------------------------------------
    public function request( Request $request ){
        // ------------------------------------------------------------------
        $response = (object) array( 'status' => 'success' );
        $projectID = (int) $request->project;
        $requestType = (int) $request->type ?? 1;
        $user = Auth::user();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $project = Project::find( $projectID );
        if( !$project ) $response->status = 'error';
        else {
            // --------------------------------------------------------------
            $project->approval_request = 1; // Set approval-request to 1
            $project->save(); // Save the update
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $response->project = $project->only([ 'approval_request' ]);
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Do mass update to inactivate previous requests
            // --------------------------------------------------------------
            $query = Inspection::with([ 'user' ])
                ->where( 'kind', $requestType )
                ->where( 'project_id', $project->id )
                ->orderBy( 'created_at', 'desc' );
            $previous = $query->update([ 'active' => false ]);
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $inspection = factory( Inspection::class )->states('init')->make();
            // --------------------------------------------------------------
            $inspection->user_id = $user->id; // Add user reference
            $inspection->project_id = $project->id; // Add project reference
            $inspection->kind = $requestType;
            $inspection->examination = 1;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Request context
            // --------------------------------------------------------------
            if( !empty( $request->context )) $inspection->context = $request->context;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Sheet reference
            // --------------------------------------------------------------
            if( !empty( $request->sheet )) $inspection->sheet_id = $request->sheet;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Port numbers
            // --------------------------------------------------------------
            // dd( $project );
            if( $project->port_pj_info_number ) $inspection->port_number = 1;
            if( $project->port_contract_number ) $inspection->port_number = 2;
            // else mas_section.port_section_number
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $inspection->active = true;
            $inspection->created_at = Carbon::now();
            $inspection->updated_at = Carbon::now();
            // --------------------------------------------------------------
            $inspection->save(); // Save the updates
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $entry = $query->find( $inspection->id );
            $response->inspection = $entry;
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        return response()->json( (array) $response );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------
}
// --------------------------------------------------------------------------
