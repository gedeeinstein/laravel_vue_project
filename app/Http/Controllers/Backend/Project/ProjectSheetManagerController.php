<?php
// --------------------------------------------------------------------------
namespace App\Http\Controllers\Backend\Project;
// --------------------------------------------------------------------------
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
// --------------------------------------------------------------------------
use App\Models\MasterValue;
use App\Models\PjSheetCalculate;
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
// Project Sheet Manager
// --------------------------------------------------------------------------
class ProjectSheetManagerController extends Controller {
    // ----------------------------------------------------------------------
    public function index(){
        // ------------------------------------------------------------------
        $data = new \stdClass;
        $data->dataset = array();
        $projectGroups = config('const.PROJECT_SHEET_GROUPS');
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $data->groups = $projectGroups;
        $data->page_title = __('project.manager.page.title');
        $data->form_action = route('project.sheet-manager.update');
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Collect all group and fields into a dataset
        // ------------------------------------------------------------------
        $query = MasterValue::select('id', 'key', 'value')->orderBy('sort', 'asc');
        $groups = $query->where('type', 'pj_sheet_calculate_group')->get()->toArray();
        // ------------------------------------------------------------------
        foreach( $groups as $pjGroup ){
            // --------------------------------------------------------------
            $group = new \stdClass;
            $pjGroup = (object) $pjGroup;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Initial data
            // --------------------------------------------------------------
            $group->id = $pjGroup->id;
            $group->key = $pjGroup->key;
            $group->label = $pjGroup->value;
            // --------------------------------------------------------------
            
            // --------------------------------------------------------------
            if( !empty( $group->key )){
                // ----------------------------------------------------------
                $group->key = (int) $group->key;
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Project sheet group identifier
                // ----------------------------------------------------------
                if( !empty( $projectGroups )) foreach( $projectGroups as $index => $item ){
                    if( $index === $group->key ) $group->name = $item;
                }
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Create empt container
                // ----------------------------------------------------------
                if( empty( $group->fields )) $group->fields = array();
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                $counter = 1; $key = (int) $group->key;
                $baseKey = $key * 1000;
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Loop until there are no more fields to find
                // ----------------------------------------------------------
                while( $counter ){
                    // ------------------------------------------------------
                    $fieldKey = $baseKey + $counter;
                    $query = MasterValue::select('id', 'key', 'value')->orderBy('sort', 'asc');
                    $query = $query->where('type', 'pj_sheet_calculate_field');
                    $field = $query->where( 'key', (string) $fieldKey )->first();
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // If field isnt found, break out of the loop
                    // ------------------------------------------------------
                    if( !$field ) break;
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // If field found, add it to the list 
                    // ------------------------------------------------------
                    else {
                        // --------------------------------------------------
                        // Initial field data
                        // --------------------------------------------------
                        $entry = new \stdClass;
                        $entry->value = '';
                        $entry->id = $field->id;
                        $entry->key = (int) $field->key;
                        $entry->label = $field->value;
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Get the current pj-sheet calculate values
                        // --------------------------------------------------
                        $record = PjSheetCalculate::where( 'field_id', $entry->id )->first();
                        if( $record ){
                            if( !empty( $record->value )) $entry->value = $record->value;
                            if( isset( $record->default_value )) $entry->default = (float) $record->default_value;
                        }
                        // --------------------------------------------------

                        // --------------------------------------------------
                        $group->fields[] = array( $entry );
                        $counter++;
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // Create paired-group fields
                // ----------------------------------------------------------
                $paired = array( 4, 5, 6 ); // List of paired group
                // ----------------------------------------------------------
                if( in_array( $key, $paired ) && !empty( $group->fields )){
                    // ------------------------------------------------------
                    $counter = 1; $fields = array(); $pair = array();
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Build the paired fields
                    // ------------------------------------------------------
                    while( $counter ){
                        $index = $counter - 1;
                        // --------------------------------------------------
                        // If field does not exist, break out
                        // --------------------------------------------------
                        if( empty( $group->fields[ $index ])) break;
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Otherwise
                        // --------------------------------------------------
                        else {
                            $field = $group->fields[ $index ];
                            // ----------------------------------------------
                            // If it an odd index
                            // ----------------------------------------------
                            if( $counter % 2 == 1 ) $pair[] = $field[0];
                            // ----------------------------------------------
                            // If an even index
                            // ----------------------------------------------
                            else {
                                $pair[] = $field[0];
                                $fields[] = $pair;
                                $pair = array();
                            }
                            // ----------------------------------------------
                            $counter++; // Counter increment
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Assign the paired fields back
                    // ------------------------------------------------------
                    $group->fields = $fields;
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                $data->dataset[] = $group;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------


        // ------------------------------------------------------------------
        // dd( $data );
        // ------------------------------------------------------------------
        return view( 'backend.project.sheet-manager.form', (array) $data );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Update handler
    // ----------------------------------------------------------------------
    public function update( Request $request ){
        // ------------------------------------------------------------------
        $data = (object) $request->all();
        if( !isset( $data->dataset )) return response()->json( null );
        // ------------------------------------------------------------------


        // ------------------------------------------------------------------
        // Use DB transaction and loop thru dataset to field each fields
        // ------------------------------------------------------------------
        DB::transaction( function() use( $data ){
            // --------------------------------------------------------------
            if( !empty( $data->dataset )) foreach( $data->dataset as $group ){
                $group = (object) $group;
                if( !empty( $group->fields )) foreach( $group->fields as $fields ){
                    // ------------------------------------------------------
                    if( !empty( $fields )) foreach( $fields as $field ){
                        $field = (object) $field;
                        if( !empty( $field->id )){
                            // ----------------------------------------------
                            // Update field value 
                            // ----------------------------------------------
                            $query = DB::table('pj_sheet_calculates')->where( 'field_id', $field->id );
                            $query->update([ 'value' => $field->value ]);
                            // ----------------------------------------------
                        }
                    }
                    // ------------------------------------------------------
                }
            }
            // --------------------------------------------------------------
        }, 5 );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $result = new \stdClass;
        return response()->json( $data->dataset );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------
}
// --------------------------------------------------------------------------
