<?php
// --------------------------------------------------------------------------
namespace App\Http\Controllers\Backend;
// --------------------------------------------------------------------------
use App\Helpers\DatatablesHelper;
use App\Http\Controllers\Controller;
// --------------------------------------------------------------------------
use App\Models\User;
use App\Models\Company;
use App\Models\CompanyBank;
use App\Models\CompanyOffice;
use App\Models\CompanyBankAccount;
use App\Models\CompanyBorrower;
use App\Models\MasterValue;
// --------------------------------------------------------------------------
use App\Traits\LogActivityTrait;
// --------------------------------------------------------------------------
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
class CompanyController extends Controller {
    // ----------------------------------------------------------------------
    use LogActivityTrait;
    public function __construct(){}
    // ----------------------------------------------------------------------

    // ----------------------------------------------------------------------
    protected function validator( array $data, $type ){
        return Validator::make( $data, [
            // --------------------------------------------------------------
            'display_name'  => 'required|string|max:100',
            'email'         => 'required|email|max:255|unique:admins,email' . ( $type == 'update' ? ','.$data['admin_id'] : ''),
            'password'      => $type == 'create' ? 'required|string|min:8|max:255' : 'string|min:8|max:255',
            // --------------------------------------------------------------
            'company_name'  => 'required|string|max:50',
            'post_code'     => 'required|max:7|min:5',
            'address'       => 'required|max:100|min:5',
            'phone'         => 'required|max:20|min:5',
            // --------------------------------------------------------------
        ]);
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    private function get_company( $id ){
        // ------------------------------------------------------------------
        $id = (int) $id;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $query = Company::where( 'id', $id );
        // ------------------------------------------------------------------
        $query = $query->with([ 'banks' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'offices' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'accounts' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------
        $query = $query->with([ 'borrowers' => function( $query ){
            $query->orderBy( 'index', 'asc' );
        }]);
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $entry = $query->first();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate agent license
        // ------------------------------------------------------------------
        if( !empty( $entry->license_date )){
            $date = Carbon::parse( $entry->license_date );
            $entry->license_date = $date->format('Y/m/d');
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        return $entry;
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    public function show( Request $request ){
        // ------------------------------------------------------------------
        $param = (object) $request->route()->parameters;
        $types = config('const.COMPANY_TYPES');
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Current logged-in user
        // ------------------------------------------------------------------
        $user = Auth::user(); 
        $role = $user->user_role;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        if( isset( $param->company ) && $param->company == 'json' ){
            // --------------------------------------------------------------
            $query = Company::withCount('users');
            if( 'global_admin' != $role->name ){
                $query = $query->where( 'id', $user->company_id );
            }
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Datatable data source
            // --------------------------------------------------------------
            $opt = array( 'current_nest' => 'user', 'style' => 'success', 'icon' => 'users' );
            $source = DatatablesHelper::json( $query, true, true, null, $opt );
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Individual user list for global admin
            // --------------------------------------------------------------
            if( 'global_admin' == $role->name ){
                // ----------------------------------------------------------
                $source = json_decode( $source->content());
                if( isset( $source->data )){
                    // ------------------------------------------------------
                    $individual = (object) array(
                        'id' => 'individual', 
                        'type' => 'individual', 'attributes' => '',
                        'name' => __('label.$company.individual'),
                        'name_kana' => __('label.$company.individual')
                    );
                    if( !empty( $types )) foreach( $types as $name => $type ){
                        $individual->{ $type } = null;
                    };
                    // ------------------------------------------------------
                    $individual->users_count = User::where( 'company_id', null )->count();
                    array_unshift( $source->data, $individual );
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                return response()->json( $source );
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            return $source;
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        abort(404);
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Company list page
    // ----------------------------------------------------------------------
    public function index(){
        // ------------------------------------------------------------------
        $data = new \stdClass;
        $user = Auth::user();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Current logged-in user
        // ------------------------------------------------------------------
        $data->user = $user;
        $data->role = $user->user_role;
        $data->admin = 'global_admin' == $user->user_role->name;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Base properties
        // ------------------------------------------------------------------
        $data->page_title = __('label.$company.list');
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // dd( $data );
        return view( 'backend.company.index', (array) $data );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Create entry page
    // ----------------------------------------------------------------------
    public function create(){
        // ------------------------------------------------------------------
        $data = new \stdClass;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Current logged-in user
        // ------------------------------------------------------------------
        $data->user = Auth::user();
        $data->role = $data->user->user_role;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Create initial entry using factory
        // ------------------------------------------------------------------
        $entry = factory( Company::class )->states( 'init', 'init-relations' )->make();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Base properties
        // ------------------------------------------------------------------
        $data->item        = $entry;
        $data->page_type   = 'create';
        $data->page_title  = __('label.add') . ' ' . __('label.company');
        $data->form_action = route( 'company.store' );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate agent license authorizer
        // ------------------------------------------------------------------
        $query = MasterValue::where( 'type', 'realestate_license_organ' );
        $data->authorizers = $query->orderBy( 'sort', 'asc' )->where( 'masterdeleted', 0 )->get();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Bank information for the inhouse group
        // ------------------------------------------------------------------
        $query = CompanyBank::with( 'company' )->orderBy( 'id', 'asc' );
        $data->banks = $query->get();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate guarantee association
        // ------------------------------------------------------------------
        $fields = array( 'id', 'type', 'key', 'value' );
        $query = MasterValue::select( $fields )->orderBy( 'sort', 'asc' )->where( 'masterdeleted', 0 );
        $associations = $query->where( 'type', 'realestate_guarantee_association' )->get();
        $data->associations = $associations;
        // ------------------------------------------------------------------
        if( !$associations->isEmpty()){
            $data->association = $associations->first()->key;
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // dd( $data->item );
        return view( 'backend.company.form', (array) $data );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Store handler
    // ----------------------------------------------------------------------
    public function store( Request $request ){
        // ------------------------------------------------------------------
        $data = (object) $request->all();
        if( !isset( $data->entry )) return response()->json( null );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        if( isset( $data->entry )){
            // --------------------------------------------------------------
            $type = (object) config('const.COMPANY_TYPES');
            $entry = clone (object) $data->entry;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Base inserts
            // --------------------------------------------------------------
            $inserts = array( 'name', 'name_kana' );
            if( !empty( $type )) foreach( $type as $field ){ $inserts[] = $field; };
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $is_bank = isset( $type->bank ) && !empty( $entry->{ $type->bank });
            $is_agent = isset( $type->agent ) && !empty( $entry->{ $type->agent });
            $is_inhouse = isset( $type->group ) && !empty( $entry->{ $type->group });
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Real estate agent company
            // --------------------------------------------------------------
            if( $is_agent ){
                // ----------------------------------------------------------
                $agent = 'real_estate_agent'; $license = 'license';
                $association = 'real_estate_guarantee_association';
                // ----------------------------------------------------------
                $inserts[] = "{$agent}_office_main_address";
                $inserts[] = "{$agent}_office_main_phone_number";
                $inserts[] = "{$agent}_representative_name";
                $inserts[] = "{$license}_authorizer_id";
                $inserts[] = "{$license}_update";
                $inserts[] = "{$license}_number";
                $inserts[] = "{$license}_date";
                // ----------------------------------------------------------
                $inserts[] = $association;
                $inserts[] = "{$agent}_depositary_name";
                $inserts[] = "{$agent}_depositary_name_address";
                // ----------------------------------------------------------
                // If not "other" guarantee association
                // ----------------------------------------------------------
                if( isset( $entry->{ $association } ) && 'other' !== $entry->{ $association }){
                    $entry->{ "{$agent}_depositary_name" } = null;
                    $entry->{ "{$agent}_depositary_name_address" } = null;
                }
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // Collect agent offices
                // ----------------------------------------------------------
                $offices = array();
                // ----------------------------------------------------------
                if( !empty( $entry->offices )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->offices as $office ){
                        // --------------------------------------------------
                        $office = (object) $office;
                        if( !empty( $office->name )){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->name = $office->name;
                            $insert->number = (int) $office->number;
                            $insert->address = $office->address;
                            $insert->updated_at = Carbon::now();
                            $insert->created_at = Carbon::now();
                            // ----------------------------------------------
                            $offices[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $inserts['offices'] = $offices;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // Bank company
            // --------------------------------------------------------------
            if( $is_bank ){
                // ----------------------------------------------------------
                $banks = array();
                $inserts[] = 'name_abbreviation';
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Collect bank branches
                // ----------------------------------------------------------
                if( !empty( $entry->banks )){
                    // ------------------------------------------------------
                    $index = 0;
                    $name = 'name_branch'; $abbr = "{$name}_abbreviation";
                    // ------------------------------------------------------
                    foreach( $entry->banks as $bank ){
                        // --------------------------------------------------
                        $bank = (object) $bank;
                        if( !empty( $bank->{ $name })){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->{ $name } = $bank->{ $name };
                            $insert->{ $abbr } = $bank->{ $abbr };
                            $insert->updated_at = Carbon::now();
                            $insert->created_at = Carbon::now();
                            // ----------------------------------------------
                            $banks[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $inserts['banks'] = $banks;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // In House company
            // --------------------------------------------------------------
            if( $is_inhouse ){
                // ----------------------------------------------------------
                $inserts[] = 'kind_in_house_abbreviation';
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Collect bank accounts
                // ----------------------------------------------------------
                $accounts = array();
                // ----------------------------------------------------------
                if( !empty( $entry->accounts )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->accounts as $account ){
                        // --------------------------------------------------
                        $account = (object) $account;
                        if( isset( $account->bank_id ) && $account->bank_id ){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->bank_id = (int) $account->bank_id;
                            $insert->company_id = (int) $account->company_id;
                            // ----------------------------------------------
                            $insert->account_kind = (int) $account->account_kind;
                            $insert->account_number = $account->account_number;
                            // ----------------------------------------------
                            $insert->updated_at = Carbon::now();
                            $insert->created_at = Carbon::now();
                            // ----------------------------------------------
                            $accounts[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $inserts['accounts'] = $accounts;
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // Collect bank borrowers
                // ----------------------------------------------------------
                $borrowers = array();
                // ----------------------------------------------------------
                if( !empty( $entry->borrowers )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->borrowers as $borrower ){
                        // --------------------------------------------------
                        $borrower = (object) $borrower;
                        if( isset( $borrower->bank_id ) && $borrower->bank_id ){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->bank_id = (int) $borrower->bank_id;
                            $insert->company_id = (int) $borrower->company_id;
                            $insert->loan_limit = (int) $borrower->loan_limit;
                            // ----------------------------------------------
                            $insert->updated_at = Carbon::now();
                            $insert->created_at = Carbon::now();
                            // ----------------------------------------------
                            $borrowers[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $inserts['borrowers'] = $borrowers;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // Store new company
            // --------------------------------------------------------------
            if( !empty( $entry )){
                // ----------------------------------------------------------
                $inserts = (object) $inserts;
                $company = new Company;
                // ----------------------------------------------------------
                if( !empty( $inserts )){
                    // ------------------------------------------------------
                    // Loop through all properties
                    // ------------------------------------------------------
                    foreach( $inserts as $field ){
                        if( is_string( $field )) $company->{ $field } = $entry->{ $field };
                    }
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Save the entry
                    // ------------------------------------------------------
                    $company->save();
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process bank branch entries
                    // ------------------------------------------------------
                    if( $is_bank && !empty( $company->id ) && !empty( $inserts->banks )){
                        // --------------------------------------------------
                        // List fields to insert
                        // --------------------------------------------------
                        $branch = 'name_branch';
                        $fields = array( 'index', $branch, "{$branch}_abbreviation" );
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Save new entries
                        // --------------------------------------------------
                        foreach( $inserts->banks as $bank ){
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->company_id = $company->id;
                            $dataset->updated_at = Carbon::now();
                            $dataset->created_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $bank->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyBank::insert( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process office entries
                    // ------------------------------------------------------
                    if( $is_agent && !empty( $company->id ) && !empty( $inserts->offices )){
                        // --------------------------------------------------
                        $fields = array( 'index', 'name', 'address', 'number' );
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Save new entries
                        // --------------------------------------------------
                        foreach( $inserts->offices as $office ){
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->company_id = $company->id;
                            $dataset->updated_at = Carbon::now();
                            $dataset->created_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $office->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyOffice::insert( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process inhouse bank-account and borrower entries
                    // ------------------------------------------------------
                    if( $is_inhouse && !empty( $company->id )){
                        // --------------------------------------------------
                        // Process bank account entries
                        // --------------------------------------------------
                        if( !empty( $inserts->accounts )){
                            // ----------------------------------------------
                            $fields = array( 'index', 'bank_id', 'account_kind', 'account_number' );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Save new entries
                            // ----------------------------------------------
                            foreach( $inserts->accounts as $account ){
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->company_id = $company->id;
                                $dataset->updated_at = Carbon::now();
                                $dataset->created_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $account->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBankAccount::insert( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------


                        // --------------------------------------------------
                        // Process bank account entries
                        // --------------------------------------------------
                        if( !empty( $inserts->borrowers )){
                            // ----------------------------------------------
                            $fields = array( 'index', 'bank_id', 'loan_limit' );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Save new entries
                            // ----------------------------------------------
                            foreach( $inserts->borrowers as $borrower ){
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->company_id = $company->id;
                                $dataset->updated_at = Carbon::now();
                                $dataset->created_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $borrower->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBorrower::insert( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            if( !empty( $company->id )){
                // ----------------------------------------------------------
                // Create the flash message
                // ----------------------------------------------------------
                $request->session()->flash( 'success', config('const.SUCCESS_CREATE_MESSAGE'));
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Get the company entry to return back
                // ----------------------------------------------------------
                $entry = $this->get_company( $company->id );
                return response()->json( $entry );
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            return null;
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Edit page
    // ----------------------------------------------------------------------
    public function edit( Request $request ){
        // ------------------------------------------------------------------
        $data = new \stdClass;
        $param = (object) $request->route()->parameters;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        if( !isset( $param->company )) return abort(404);
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        $entry = $this->get_company( $param->company );
        if( !$entry ) return abort(404);
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Base properties
        // ------------------------------------------------------------------
        $data->item        = $entry;
        $data->page_type   = 'edit';
        $data->page_title  = $entry->name;
        $data->form_action = route( 'company.update', $param->company );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Current logged-in user
        // ------------------------------------------------------------------
        $data->user = Auth::user();
        $data->role = $data->user->user_role;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate agent license authorizer
        // ------------------------------------------------------------------
        $query = MasterValue::where('type', 'realestate_license_organ');
        $data->authorizers = $query->orderBy( 'sort', 'asc' )->where( 'masterdeleted', 0 )->get();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Real estate guarantee association
        // ------------------------------------------------------------------
        $fields = array( 'id', 'type', 'key', 'value' );
        $query = MasterValue::select( $fields )->orderBy( 'sort', 'asc' )->where( 'masterdeleted', 0 );
        $associations = $query->where( 'type', 'realestate_guarantee_association' )->get();
        $data->associations = $associations;
        // ------------------------------------------------------------------
        if( !$associations->isEmpty()){
            // --------------------------------------------------------------
            $first = $associations->first(); $last = $associations->last();
            // --------------------------------------------------------------
            $depositary_name = $entry->real_estate_agent_depositary_name;
            $depositary_address = $entry->real_estate_agent_depositary_name_address;
            // --------------------------------------------------------------
            if( $depositary_name || $depositary_address ) $data->association = $last->key;
            else if( !empty( $data->associations )) $data->association = $first->key;
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------


        // ------------------------------------------------------------------
        // Bank information for the inhouse group
        // ------------------------------------------------------------------
        $query = CompanyBank::with('company')->orderBy( 'id', 'asc' );
        $data->banks = $query->get();
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // dd( $data->item );
        return view( 'backend.company.form', (array) $data );
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Handle the update request
    // ----------------------------------------------------------------------
    public function update( Request $request ){
        // ------------------------------------------------------------------
        $data = (object) $request->all();
        if( !isset( $data->entry )) return response()->json( null );
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Current logged-in user
        // ------------------------------------------------------------------
        $user = Auth::user();
        $role = $user->user_role;
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        if( isset( $data->entry )){
            // --------------------------------------------------------------
            $type = (object) config('const.COMPANY_TYPES');
            $entry = clone (object) $data->entry;
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Base updates
            // --------------------------------------------------------------
            $updates = array( 'name', 'name_kana' );
            if( !empty( $type )) foreach( $type as $field ){ $updates[] = $field; };
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            $is_bank = isset( $type->bank ) && !empty( $entry->{ $type->bank });
            $is_agent = isset( $type->agent ) && !empty( $entry->{ $type->agent });
            $is_inhouse = isset( $type->group ) && !empty( $entry->{ $type->group });
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Real estate agent company
            // --------------------------------------------------------------
            if( $is_agent ){
                // ----------------------------------------------------------
                $agent = 'real_estate_agent'; $license = 'license';
                $association = 'real_estate_guarantee_association';
                // ----------------------------------------------------------
                $updates[] = "{$agent}_office_main_address";
                $updates[] = "{$agent}_office_main_phone_number";
                $updates[] = "{$agent}_representative_name";
                $updates[] = "{$license}_authorizer_id";
                $updates[] = "{$license}_update";
                $updates[] = "{$license}_number";
                $updates[] = "{$license}_date";
                // ----------------------------------------------------------
                $updates[] = $association;
                $updates[] = "{$agent}_depositary_name";
                $updates[] = "{$agent}_depositary_name_address";
                // ----------------------------------------------------------
                // If not "other" guarantee association
                // ----------------------------------------------------------
                if( isset( $entry->{ $association } ) && 'other' !== $entry->{ $association }){
                    $entry->{ "{$agent}_depositary_name" } = null;
                    $entry->{ "{$agent}_depositary_name_address" } = null;
                }
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // Collect agent offices
                // ----------------------------------------------------------
                $offices = new \stdClass;
                $offices->inserts = array();
                $offices->updates = array();
                // ----------------------------------------------------------
                if( !empty( $entry->offices )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->offices as $office ){
                        // --------------------------------------------------
                        $office = (object) $office;
                        if( !empty( $office->name )){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            if( !empty( $office->id )) $insert->id = $office->id;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->name = $office->name;
                            $insert->number = (int) $office->number;
                            $insert->address = $office->address;
                            $insert->updated_at = Carbon::now();
                            // ----------------------------------------------
                            if( !isset( $office->id )){
                                $insert->created_at = Carbon::now();
                                $offices->inserts[] = $insert;
                                continue;
                            }
                            // ----------------------------------------------
                            $offices->updates[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $updates['offices'] = $offices;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // Bank company
            // --------------------------------------------------------------
            if( $is_bank ){
                // ----------------------------------------------------------
                $banks = new \stdClass;
                $banks->inserts = array();
                $banks->updates = array();
                $updates[] = 'name_abbreviation';
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Collect bank branches
                // ----------------------------------------------------------
                if( !empty( $entry->banks )){
                    // ------------------------------------------------------
                    $index = 0;
                    $name = 'name_branch'; $abbr = "{$name}_abbreviation";
                    // ------------------------------------------------------
                    foreach( $entry->banks as $bank ){
                        // --------------------------------------------------
                        $bank = (object) $bank;
                        if( !empty( $bank->{ $name })){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            if( !empty( $bank->id )) $insert->id = $bank->id;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->{ $name } = $bank->{ $name };
                            $insert->{ $abbr } = $bank->{ $abbr };
                            $insert->updated_at = Carbon::now();
                            // ----------------------------------------------
                            if( !isset( $bank->id )){
                                $insert->created_at = Carbon::now();
                                $banks->inserts[] = $insert;
                                continue;
                            }
                            // ----------------------------------------------
                            $banks->updates[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $updates['banks'] = $banks;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // In House company
            // --------------------------------------------------------------
            if( $is_inhouse ){
                // ----------------------------------------------------------
                $updates[] = 'kind_in_house_abbreviation';
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Collect bank accounts
                // ----------------------------------------------------------
                $accounts = new \stdClass;
                $accounts->inserts = array();
                $accounts->updates = array();
                // ----------------------------------------------------------
                if( !empty( $entry->accounts )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->accounts as $account ){
                        // --------------------------------------------------
                        $account = (object) $account;
                        if( isset( $account->bank_id ) && $account->bank_id ){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            if( !empty( $account->id )) $insert->id = $account->id;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->bank_id = (int) $account->bank_id;
                            $insert->company_id = (int) $account->company_id;
                            // ----------------------------------------------
                            $insert->account_kind = (int) $account->account_kind;
                            $insert->account_number = $account->account_number;
                            // ----------------------------------------------
                            $insert->updated_at = Carbon::now();
                            // ----------------------------------------------
                            if( !isset( $account->id )){
                                $insert->created_at = Carbon::now();
                                $accounts->inserts[] = $insert;
                                continue;
                            }
                            // ----------------------------------------------
                            $accounts->updates[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $updates['accounts'] = $accounts;
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // Collect bank borrowers
                // ----------------------------------------------------------
                $borrowers = new \stdClass;
                $borrowers->inserts = array();
                $borrowers->updates = array();
                // ----------------------------------------------------------
                if( !empty( $entry->borrowers )){
                    // ------------------------------------------------------
                    $index = 0;
                    // ------------------------------------------------------
                    foreach( $entry->borrowers as $borrower ){
                        // --------------------------------------------------
                        $borrower = (object) $borrower;
                        if( isset( $borrower->bank_id ) && $borrower->bank_id ){
                            // ----------------------------------------------
                            $index++; $insert = new \stdClass;
                            if( !empty( $borrower->id )) $insert->id = $borrower->id;
                            // ----------------------------------------------
                            $insert->index = $index;
                            $insert->bank_id = (int) $borrower->bank_id;
                            $insert->company_id = (int) $borrower->company_id;
                            $insert->loan_limit = (int) $borrower->loan_limit;
                            // ----------------------------------------------
                            $insert->updated_at = Carbon::now();
                            // ----------------------------------------------
                            if( !isset( $borrower->id )){
                                $insert->created_at = Carbon::now();
                                $borrowers->inserts[] = $insert;
                                continue;
                            }
                            // ----------------------------------------------
                            $borrowers->updates[] = $insert;
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
                $updates['borrowers'] = $borrowers;
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            // Do the update
            // --------------------------------------------------------------
            if( !empty( $entry->id )){
                // ----------------------------------------------------------
                $updates = (object) $updates;
                $company = Company::find( $entry->id );
                // ----------------------------------------------------------
                if( $company ){
                    // ------------------------------------------------------
                    if( !empty( $updates )) foreach( $updates as $field ){
                        if( is_string( $field )) $company->{ $field } = $entry->{ $field };
                    }
                    // ------------------------------------------------------
                    $company->save();
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process bank branch updates
                    // ------------------------------------------------------
                    if( $is_bank && !empty( $updates->banks )){
                        // --------------------------------------------------
                        // List fields to update
                        // --------------------------------------------------
                        $branch = 'name_branch';
                        $fields = array( 'index', $branch, "{$branch}_abbreviation" );
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Process updates and deletes
                        // --------------------------------------------------
                        $delete = CompanyBank::where( 'company_id', $entry->id );
                        foreach( $updates->banks->updates as $bank ){
                            // ----------------------------------------------
                            // Collect records to delete
                            // ----------------------------------------------
                            $delete = $delete->where( 'id', '<>', $bank->id );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Update the current bank branches
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->updated_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $bank->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyBank::find( $bank->id )->update( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                        // Delete banks other than those being listed
                        // --------------------------------------------------
                        $delete->delete();
                        // --------------------------------------------------


                        // --------------------------------------------------
                        // Save new entries
                        // --------------------------------------------------
                        foreach( $updates->banks->inserts as $bank ){
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->company_id = $entry->id;
                            $dataset->updated_at = Carbon::now();
                            $dataset->created_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $bank->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyBank::insert( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process office updates
                    // ------------------------------------------------------
                    if( $is_agent && !empty( $updates->offices )){
                        // --------------------------------------------------
                        $fields = array( 'index', 'name', 'address', 'number' );
                        // --------------------------------------------------

                        // --------------------------------------------------
                        // Process updates and deletes
                        // --------------------------------------------------
                        $delete = CompanyOffice::where( 'company_id', $entry->id );
                        foreach( $updates->offices->updates as $office ){
                            // ----------------------------------------------
                            // Collect records to delete
                            // ----------------------------------------------
                            $delete = $delete->where( 'id', '<>', $office->id );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Update the records
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->updated_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $office->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyOffice::find( $office->id )->update( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                        // Delete items other than those being listed
                        // --------------------------------------------------
                        $delete->delete();
                        // --------------------------------------------------


                        // --------------------------------------------------
                        // Save new entries
                        // --------------------------------------------------
                        foreach( $updates->offices->inserts as $office ){
                            // ----------------------------------------------
                            $dataset = new \stdClass;
                            $dataset->company_id = $entry->id;
                            $dataset->updated_at = Carbon::now();
                            $dataset->created_at = Carbon::now();
                            // ----------------------------------------------
                            foreach( $fields as $field ){
                                $dataset->{ $field } = $office->{ $field };
                            }
                            // ----------------------------------------------
                            CompanyOffice::insert( (array) $dataset );
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------


                    // ------------------------------------------------------
                    // Process inhouse bank-account and borrower updates
                    // ------------------------------------------------------
                    if( $is_inhouse ){
                        // --------------------------------------------------
                        // Process bank account updates
                        // --------------------------------------------------
                        if( !empty( $updates->accounts )){
                            // ----------------------------------------------
                            $fields = array( 'index', 'bank_id', 'account_kind', 'account_number' );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Process updates and deletes
                            // ----------------------------------------------
                            $delete = CompanyBankAccount::where( 'company_id', $entry->id );
                            foreach( $updates->accounts->updates as $account ){
                                // ------------------------------------------
                                // Collect records to delete
                                // ------------------------------------------
                                $delete = $delete->where( 'id', '<>', $account->id );
                                // ------------------------------------------

                                // ------------------------------------------
                                // Update the records
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->updated_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $account->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBankAccount::find( $account->id )->update( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                            // Delete items other than those being listed
                            // ----------------------------------------------
                            $delete->delete();
                            // ----------------------------------------------


                            // ----------------------------------------------
                            // Save new entries
                            // ----------------------------------------------
                            foreach( $updates->accounts->inserts as $account ){
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->company_id = $entry->id;
                                $dataset->updated_at = Carbon::now();
                                $dataset->created_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $account->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBankAccount::insert( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------


                        // --------------------------------------------------
                        // Process bank account updates
                        // --------------------------------------------------
                        if( !empty( $updates->borrowers )){
                            // ----------------------------------------------
                            $fields = array( 'index', 'bank_id', 'loan_limit' );
                            // ----------------------------------------------

                            // ----------------------------------------------
                            // Process updates and deletes
                            // ----------------------------------------------
                            $delete = CompanyBorrower::where( 'company_id', $entry->id );
                            foreach( $updates->borrowers->updates as $borrower ){
                                // ------------------------------------------
                                // Collect records to delete
                                // ------------------------------------------
                                $delete = $delete->where( 'id', '<>', $borrower->id );
                                // ------------------------------------------

                                // ------------------------------------------
                                // Update the records
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->updated_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $borrower->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBorrower::find( $borrower->id )->update( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                            // Delete items other than those being listed
                            // ----------------------------------------------
                            $delete->delete();
                            // ----------------------------------------------


                            // ----------------------------------------------
                            // Save new entries
                            // ----------------------------------------------
                            foreach( $updates->borrowers->inserts as $borrower ){
                                // ------------------------------------------
                                $dataset = new \stdClass;
                                $dataset->company_id = $entry->id;
                                $dataset->updated_at = Carbon::now();
                                $dataset->created_at = Carbon::now();
                                // ------------------------------------------
                                foreach( $fields as $field ){
                                    $dataset->{ $field } = $borrower->{ $field };
                                }
                                // ------------------------------------------
                                CompanyBorrower::insert( (array) $dataset );
                                // ------------------------------------------
                            }
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------


            // --------------------------------------------------------------
            $updated = $this->get_company( $entry->id );
            return response()->json( $updated );
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------


    // ----------------------------------------------------------------------
    // Delete company - Soft deletion will be applied
    // ----------------------------------------------------------------------
    public function destroy( Request $request, $id ){
        // ------------------------------------------------------------------
        if( !empty( $id )){
            // --------------------------------------------------------------
            // Find the company
            // --------------------------------------------------------------
            $user = Auth::user();
            $company = $this->get_company( $id );
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Delete all supporting properties
            // --------------------------------------------------------------
            if( $company ){
                // ----------------------------------------------------------
                // Bank branch deletion
                // ----------------------------------------------------------
                if( !empty( $company->banks )) foreach( $company->banks as $entry ){
                    // ------------------------------------------------------
                    // Compose and save the log
                    // ------------------------------------------------------
                    $detail = array();
                    $subject = 'Delete Bank Branch';
                    $detail[] = 'Delete Bank Branch';
                    // ------------------------------------------------------
                    if( !empty( $company->name )) $detail[] = "Company: {$company->name}";
                    if( !empty( $entry->name_branch )) $detail[] = "Branch: {$entry->name_branch}";
                    // ------------------------------------------------------
                    $detail = join( ', ', $detail );
                    $this->saveLog( $subject, $detail, $user->email, $user->id );
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Do the deletion
                    // ------------------------------------------------------
                    $entry->delete();
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // Company office deletion
                // ----------------------------------------------------------
                if( !empty( $company->offices )) foreach( $company->offices as $entry ){
                    // ------------------------------------------------------
                    // Compose and save the log
                    // ------------------------------------------------------
                    $detail = array();
                    $subject = 'Delete Company Office';
                    $detail[] = 'Delete Company Office';
                    // ------------------------------------------------------
                    if( !empty( $company->name )) $detail[] = "Company: {$company->name}";
                    if( !empty( $entry->name )) $detail[] = "Office: {$entry->name}";
                    // ------------------------------------------------------
                    $detail = join( ', ', $detail );
                    $this->saveLog( $subject, $detail, $user->email, $user->id );
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Do the deletion
                    // ------------------------------------------------------
                    $entry->delete();
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------

                // ----------------------------------------------------------
                // In-house bank account deletion
                // ----------------------------------------------------------
                if( !empty( $company->accounts )) foreach( $company->accounts as $entry ){
                    // ------------------------------------------------------
                    // Compose and save the log
                    // ------------------------------------------------------
                    $detail = array();
                    $subject = 'Delete Bank Account';
                    $detail[] = 'Delete Bank Account';
                    // ------------------------------------------------------
                    if( !empty( $company->name )) $detail[] = "Company: {$company->name}";
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Bank information
                    // ------------------------------------------------------
                    if( !empty( $entry->company_id ) && !empty( $entry->bank_id )){
                        // --------------------------------------------------
                        $branch = CompanyBank::find( $entry->bank_id );
                        if( $branch ){
                            // ----------------------------------------------
                            $bank = Company::find( $branch->company_id );
                            // ----------------------------------------------
                            if( $bank ) $detail[] = "Bank: {$bank->name}";
                            if( $branch ) $detail[] = "Branch: {$branch->name_branch}";
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Bank account number
                    // ------------------------------------------------------
                    if( !empty( $entry->account_number )) $detail[] = "Account Number: {$entry->account_number}";
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    $detail = join( ', ', $detail );
                    $this->saveLog( $subject, $detail, $user->email, $user->id );
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Do the deletion
                    // ------------------------------------------------------
                    $entry->delete();
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------


                // ----------------------------------------------------------
                // In-house bank borrower deletion
                // ----------------------------------------------------------
                if( !empty( $company->borrowers )) foreach( $company->borrowers as $entry ){
                    // ------------------------------------------------------
                    // Compose and save the log
                    // ------------------------------------------------------
                    $detail = array();
                    $detail[] = 'Delete Borrower';
                    $subject = 'Delete Company Borrower';
                    // ------------------------------------------------------
                    if( !empty( $company->name )) $detail[] = "Company: {$company->name}";
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Bank information
                    // ------------------------------------------------------
                    if( !empty( $entry->company_id ) && !empty( $entry->bank_id )){
                        // --------------------------------------------------
                        $branch = CompanyBank::find( $entry->bank_id );
                        if( $branch ){
                            // ----------------------------------------------
                            $bank = Company::find( $branch->company_id );
                            // ----------------------------------------------
                            if( $bank ) $detail[] = "Bank: {$bank->name}";
                            if( $branch ) $detail[] = "Branch: {$branch->name_branch}";
                            // ----------------------------------------------
                        }
                        // --------------------------------------------------
                    }
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Loan limit
                    // ------------------------------------------------------
                    if( !empty( $entry->loan_limit )) $detail[] = "Loan Limit: {$entry->loan_limit}";
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    $detail = join( ', ', $detail );
                    $this->saveLog( $subject, $detail, $user->email, $user->id );
                    // ------------------------------------------------------

                    // ------------------------------------------------------
                    // Do the deletion
                    // ------------------------------------------------------
                    $entry->delete();
                    // ------------------------------------------------------
                }
                // ----------------------------------------------------------
            }
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Delete the company
            // --------------------------------------------------------------
            $company->delete();
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Save the log
            // --------------------------------------------------------------
            $user = Auth::user(); $subject = 'Delete Company';
            $description = "Delete Company, Name : {$company->name}";
            // --------------------------------------------------------------
            $this->saveLog( $subject, $description, $user->email, $user->id );
            // --------------------------------------------------------------

            // --------------------------------------------------------------
            // Create the flash message
            // --------------------------------------------------------------
            $request->session()->flash( 'success', config('const.SUCCESS_DELETE_MESSAGE'));
            // --------------------------------------------------------------
        }
        // ------------------------------------------------------------------

        // ------------------------------------------------------------------
        // Return either way
        // ------------------------------------------------------------------
        return 1;
        // ------------------------------------------------------------------
    }
    // ----------------------------------------------------------------------
}
